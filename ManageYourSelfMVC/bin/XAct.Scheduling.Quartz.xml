<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XAct.Scheduling.Quartz</name>
    </assembly>
    <members>
        <member name="T:XAct.Scheduling.Entities.AbstractQuartzJob">
            <summary>
            
            </summary>
        </member>
        <member name="F:XAct.Scheduling.Entities.AbstractQuartzJob.C_DATAMAP_INVOCATIONCOUNTER_KEY">
            <summary>
            Key to use when transfering parameters.
            </summary>
        </member>
        <member name="F:XAct.Scheduling.Entities.AbstractQuartzJob.C_DATAMAP_INVOCATIONLASTDATETIMEUTCINVOKED_KEY">
            <summary>
            Key to use when transfering parameters.
            </summary>
        </member>
        <member name="F:XAct.Scheduling.Entities.AbstractQuartzJob.C_DATAMAP_INVOCATION_INFO_KEY">
            <summary>
            Key to use when transfering parameters.
            </summary>
        </member>
        <member name="F:XAct.Scheduling.Entities.AbstractQuartzJob.C_DATAMAP_LASTEXCEPTION_KEY">
            <summary>
            Key to use when transfering parameters.
            </summary>
        </member>
        <member name="P:XAct.Scheduling.Entities.AbstractQuartzJob.SchedulingReportingService">
            <summary>
            Gets the reporting service to record exceptions when trying to invoke
            the specified job.
            </summary>
            <value>
            The scheduling reporting service.
            </value>
        </member>
        <member name="M:XAct.Scheduling.Entities.AbstractQuartzJob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Scheduling.Entities.AbstractQuartzJob"/> class.
            </summary>
        </member>
        <member name="M:XAct.Scheduling.Entities.AbstractQuartzJob.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler" /> when a <see cref="T:Quartz.ITrigger" />
            fires that is associated with the <see cref="T:Quartz.IJob" />.
            </summary>
            <param name="context">The execution context.</param>
            <remarks>
            The implementation may wish to set a  result object on the
            JobExecutionContext before this method exits.  The result itself
            is meaningless to Quartz, but may be informative to
            <see cref="T:Quartz.IJobListener" />s or
            <see cref="T:Quartz.ITriggerListener" />s that are watching the job's
            execution.
            </remarks>
        </member>
        <member name="T:XAct.Scheduling.Entities.AbstractQuarzJobInvocationInformation">
            <summary>
            
            </summary>
        </member>
        <member name="P:XAct.Scheduling.Entities.AbstractQuarzJobInvocationInformation.Id">
            <summary>
            Gets or sets the original <see cref="T:XAct.Scheduling.ScheduledTask"/>'s Id.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:XAct.Scheduling.Entities.AbstractQuarzJobInvocationInformation.GroupName">
            <summary>
            Gets or sets the <see cref="T:XAct.Scheduling.ScheduledTask"/>'s  of the group.
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="P:XAct.Scheduling.Entities.AbstractQuarzJobInvocationInformation.Name">
            <summary>
            Gets or sets the <see cref="T:XAct.Scheduling.ScheduledTask"/>'s name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:XAct.Scheduling.Entities.AbstractQuarzJobInvocationInformation.InstanceType">
            <summary>
            Gets or sets InstanceType.
            </summary>
        </member>
        <member name="P:XAct.Scheduling.Entities.AbstractQuarzJobInvocationInformation.Instance">
            <summary>
            Gets or sets the instanciation of <see cref="P:XAct.Scheduling.Entities.AbstractQuarzJobInvocationInformation.InstanceType"/>.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="P:XAct.Scheduling.Entities.AbstractQuarzJobInvocationInformation.MethodInfo">
            <summary>
            Gets or sets the method to invoke on <see cref="P:XAct.Scheduling.Entities.AbstractQuarzJobInvocationInformation.Instance"/>.
            </summary>
            <value>
            The method information.
            </value>
        </member>
        <member name="P:XAct.Scheduling.Entities.AbstractQuarzJobInvocationInformation.MethodsArguments">
            <summary>
            Gets or sets optional methods arguments to invoke <see cref="P:XAct.Scheduling.Entities.AbstractQuarzJobInvocationInformation.MethodInfo"/> with.
            </summary>
            <value>
            The methods arguments.
            </value>
        </member>
        <member name="T:XAct.Scheduling.QuartzSchedulerController">
            <summary>
            
            </summary>
        </member>
        <member name="F:XAct.Scheduling.QuartzSchedulerController._typeName">
            <summary>
            Name of the type. Used for logging purposes
            </summary>
        </member>
        <member name="F:XAct.Scheduling.QuartzSchedulerController._lock">
            <summary>
            Static lock across instances:
            </summary>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.GetInnerItem``1">
            <summary>
            Gets the inner item.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <returns></returns>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.#ctor(XAct.Environment.IDateTimeService,XAct.Environment.IEnvironmentService,XAct.Diagnostics.ITracingService)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Scheduling.QuartzSchedulerController" /> class.
            </summary>
            <param name="dateTimeService">The date time service.</param>
            <param name="environmentService">The environment service.</param>
            <param name="tracingService">The tracing service.</param>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.RegisterTask(XAct.Scheduling.ScheduledTask[])">
            <summary>
            Registers a <see cref="T:XAct.Scheduling.ScheduledTask" />
            into the current internal
            <c>Scheduler</c>.
            <para>
            Ensure that <see cref="M:XAct.Scheduling.QuartzSchedulerController.Start" />
            is invoked at some point as just
            Registering the <see cref="T:XAct.Scheduling.ScheduledTask" />
            does not automatically mean that they are being
            triggered, yet.
            </para>
            </summary>
            <param name="scheduledTasks">The scheduled tasks.</param>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.PauseTask(XAct.Scheduling.ScheduledTask)">
            <summary>
            Pauses a registered task if it is found.
            </summary>
            <param name="scheduledTask">The scheduled task.</param>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.ResumeTask(XAct.Scheduling.ScheduledTask)">
            <summary>
            Resumes a paused task if it is found.
            </summary>
            <param name="scheduledTask">The scheduled task.</param>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.RemoveTask(XAct.Scheduling.ScheduledTask)">
            <summary>
            Removes the task if it is found.
            </summary>
            <param name="scheduledTask">The scheduled task.</param>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.RemoveTask(System.Guid)">
            <summary>
            Removes the task if it is found.
            </summary>
            <param name="scheduledTaskId">The scheduled task identifier.</param>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.RemoveTask(System.String,System.String)">
            <summary>
            Removes the task if it is found.
            </summary>
            <param name="name">The name.</param>
            <param name="group">The group.</param>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.CheckExists(XAct.Scheduling.ScheduledTask)">
            <summary>
            Checks whether a task has been registered.
            </summary>
            <param name="scheduledTask">The scheduled task.</param>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.GetJobDetails(XAct.Scheduling.ScheduledTask)">
            <summary>
            Gets a current snapshot of the
            metadata passed between scheduler and job instances.
            <para>
            CAUTION:
            Scalar variables (eg: counters) will be fixed and at
            time of retrieval, and therefore safe to work with,
            but reference types may continue to be updated.
            </para>
            </summary>
            <param name="scheduledTask">The scheduled task.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.GetJobMetadata(System.Guid)">
            <summary>
            Gets a current snapshot of the
            metadata passed between scheduler and job instances.
            <para>
            CAUTION:
            Scalar variables (eg: counters) will be fixed at
            time of retrieval, and therefore safe to work with,
            but reference types may continue to be updated.
            </para>
            </summary>
            <param name="scheduledTaskId">The scheduled task's Id.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.GetJobDetails(System.String,System.String)">
            <summary>
            Gets a current snapshot of the
            metadata passed between scheduler and job instances.
            <para>
            CAUTION:
            Scalar variables (eg: counters) will be fixed and at
            time of retrieval, and therefore safe to work with,
            but reference types may continue to be updated.
            </para>
            </summary>
            <param name="name">The name.</param>
            <param name="group">The group.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.Start">
            <summary>
            Starts this scheduler.
            <para>
            Note that it invokes <see cref="M:XAct.Scheduling.QuartzSchedulerController.InitializeScheduler"/>
            </para>
            </summary>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.Standby">
            <summary>
            Pause the scheduler, and therefore the triggering
            of all <see cref="T:XAct.Scheduling.ScheduledTask" />s.
            </summary>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.Resume">
            <summary>
            Resumes the scheduler, and therefore the triggering
            of all <see cref="T:XAct.Scheduling.ScheduledTask"/>.
            </summary>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.Stop(System.Boolean)">
            <summary>
            Stop the scheduler, and therefore the triggering
            of all <see cref="T:XAct.Scheduling.ScheduledTask" />s.
            </summary>
        </member>
        <member name="M:XAct.Scheduling.QuartzSchedulerController.InitializeScheduler">
            <summary>
            Rehydrates a new scheduler with the schedules that were
            in the previous scheduler.
            <para>
            Invoked only after Stopping and Restarting the Scheduler
            to transfer jobs.
            </para>
            </summary>
        </member>
        <member name="T:XAct.Scheduling.IQuartzSchedulerController">
            <summary>
            A <c>Quartz.NET</c> specific 
            implementation of the 
            <see cref="T:XAct.Scheduling.ISchedulerController"/>
            contract.
            </summary>
        </member>
    </members>
</doc>
